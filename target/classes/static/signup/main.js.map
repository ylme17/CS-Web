{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/Common/Company.ts","webpack:///./src/app/Common/Customer.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/common/custom-validators.ts","webpack:///./src/app/components/create-company/create-company.component.css","webpack:///./src/app/components/create-company/create-company.component.html","webpack:///./src/app/components/create-company/create-company.component.ts","webpack:///./src/app/components/create-customer/create-customer.component.css","webpack:///./src/app/components/create-customer/create-customer.component.html","webpack:///./src/app/components/create-customer/create-customer.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/services/shared-data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","export class Company{\r\n    \r\n    constructor(public id : number, \r\n        public name : string,\r\n        public password : string,\r\n        public email : string)\r\n        {\r\n            \r\n        }\r\n}","export class Customer{\r\n\r\n    constructor(public id : number,\r\n        public name : string,\r\n        public password : string)\r\n        {\r\n            \r\n        }\r\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CreateCustomerComponent } from './components/create-customer/create-customer.component';\nimport { CreateCompanyComponent } from './components/create-company/create-company.component';\nimport { HomeComponent } from './components/home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomeComponent\n  },\n  {\n    path: 'customer',\n    component: CreateCustomerComponent\n  },\n  {\n    path: 'company',\n    component: CreateCompanyComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"#signInButton{\\r\\n    margin-left: 5%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxnQkFBZ0I7Q0FDbkIiLCJmaWxlIjoic3JjL2FwcC9hcHAuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIiNzaWduSW5CdXR0b257XHJcbiAgICBtYXJnaW4tbGVmdDogNSU7XHJcbn0iXX0= */\"","module.exports = \"<!--buttons to route between components-->\\n<br>\\n<button class=\\\"btn btn-dark\\\" id=\\\"signInButton\\\" (click)=\\\"routeToSignIn()\\\">Go to SignIn</button>\\n<br><br>\\n\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\nimport { SharedDataService } from './services/shared-data.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CouponSystem';\n\n  constructor(private _sharedDataService:SharedDataService){  }\n\n  routeToSignIn(){\n    window.location.href = this._sharedDataService.loginPageURL;\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpModule } from '@angular/http';\nimport { SharedDataService } from './services/shared-data.service';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\nimport { CreateCustomerComponent } from './components/create-customer/create-customer.component';\nimport { CreateCompanyComponent } from './components/create-company/create-company.component';\nimport { HomeComponent } from './components/home/home.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateCustomerComponent,\n    CreateCompanyComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    ReactiveFormsModule.withConfig({warnOnNgModelWithFormControl: 'never'}),\n    HttpModule\n  ],\n  providers: [SharedDataService, {provide: LocationStrategy, useClass:HashLocationStrategy}],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { ValidationErrors, ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nexport class CustomValidators {\r\n  static patternValidator(regex: RegExp, error: ValidationErrors): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n      if (!control.value) {\r\n        // if control is empty return no error\r\n        return null;\r\n      }\r\n\r\n      // test the value of the control against the regexp supplied\r\n      const valid = regex.test(control.value);\r\n\r\n      // if true, return no error, else return error passed in the second parameter\r\n      return valid ? null : error;\r\n    };\r\n  }\r\n\r\n  static passwordMatchValidator(control: AbstractControl) {\r\n    const password: string = control.get('password').value; // get password from our password form control\r\n    const confirmPassword: string = control.get('confirmPassword').value; // get password from our confirmPassword form control\r\n    // compare is the password math\r\n    if (password !== confirmPassword) {\r\n      // if they don't match, set an error in our confirmPassword form control\r\n      control.get('confirmPassword').setErrors({ passwordNotMatch: true });\r\n    }\r\n  }\r\n}","module.exports = \"form{\\r\\n    margin-left: 20%;\\r\\n    width: 30%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jcmVhdGUtY29tcGFueS9jcmVhdGUtY29tcGFueS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksaUJBQWlCO0lBQ2pCLFdBQVc7Q0FDZCIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY3JlYXRlLWNvbXBhbnkvY3JlYXRlLWNvbXBhbnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImZvcm17XHJcbiAgICBtYXJnaW4tbGVmdDogMjAlO1xyXG4gICAgd2lkdGg6IDMwJTtcclxufSJdfQ== */\"","module.exports = \"<!--form for add company-->\\n<form novalidate [formGroup]=\\\"myForm\\\">\\n  <legend>Hello Guest,<br> please fill the fields</legend>\\n\\n  <!--input field for name-->\\n  <div class=\\\"form-group\\\">\\n    <label>Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"companyAdd.name\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.name.errors && (myForm.controls.name.touched || myForm.controls.name.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.name.errors && (myForm.controls.name.touched || myForm.controls.name.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.name.errors.required\\\">Name is required</small>\\n    </div>\\n  </div>\\n\\n  <!--input field for password-->\\n  <div class=\\\"form-group\\\">\\n    <label>Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"companyAdd.password\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.password.errors.required\\\">Password is required</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.minlength\\\">Password must be at least 5 characters</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.maxlength\\\">Password must be maximum 8 characters</small>\\n    </div>\\n  </div>\\n  \\n  <!--input field for confirm password-->\\n  <div class=\\\"form-group\\\">\\n    <label>Retype Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm Password\\\"\\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.confirmPassword.errors && (myForm.controls.confirmPassword.touched || myForm.controls.confirmPassword.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.confirmPassword.errors && (myForm.controls.confirmPassword.touched || myForm.controls.confirmPassword.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.confirmPassword.errors.required\\\">Confirm Password is required</small>\\n      <small *ngIf=\\\"myForm.controls.confirmPassword.errors.passwordNotMatch\\\">Password not match</small>\\n    </div>\\n  </div>\\n\\n  <!--input field for email-->\\n  <div class=\\\"form-group\\\">\\n    <label>Email</label>\\n    <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"companyAdd.email\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.email.errors && (myForm.controls.email.touched || myForm.controls.email.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.email.errors && (myForm.controls.email.touched || myForm.controls.email.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.email.errors.required\\\">Email is required</small>\\n      <small *ngIf=\\\"myForm.controls.email.errors.email\\\">Email must be a valid email address</small>\\n    </div>\\n  </div>\\n\\n  <!--button become enable only when the form valid-->\\n  <button (click)=\\\"addCompany()\\\" [disabled]=\\\"!myForm.valid\\\" class=\\\"btn btn-success\\\">Sign Up <i class=\\\"fas fa-user-plus\\\"></i></button>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Company } from '../../Common/Company';\nimport { SharedDataService } from '../../services/shared-data.service';\nimport swal from 'sweetalert2';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { CustomValidators } from './../../common/custom-validators';\n\n@Component({\n  selector: 'app-create-company',\n  templateUrl: './create-company.component.html',\n  styleUrls: ['./create-company.component.css']\n})\nexport class CreateCompanyComponent implements OnInit {\n\n  companyAdd : Company = new Company(0, \"\", \"\", \"\");\n  myForm: FormGroup;\n\n  //in the constructor we provide SharedCompanyDataService for service and FormBuilder for form validation\n  constructor(private _sharedDataService:SharedDataService, private _formBuilder:FormBuilder) {  }\n\n  //initialize form validation\n  ngOnInit() {\n    this.formValidation();\n  }\n\n  //form validation conditions\n  formValidation(){\n    this.myForm = this._formBuilder.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(8)]],\n      confirmPassword: ['', Validators.compose([Validators.required])]\n    },\n    {\n      validator: CustomValidators.passwordMatchValidator\n    });\n  }\n\n  //add company to DB\n  addCompany(){\n    this._sharedDataService.addCompany(this.companyAdd).\n    subscribe(\n      (resp) =>\n      {\n        this.companyAdd = new Company(0, \"\", \"\", \"\");\n        swal({\n          type: 'success',\n          title: 'Company created',\n          showConfirmButton: false,\n          timer: 1500\n        })\n      },\n      (err) =>\n      {\n        swal({\n          type: 'error',\n          title: 'Oops...',\n          text: err._body\n        })\n      }\n    )\n  }\n\n}\n","module.exports = \"form{\\r\\n    margin-left: 20%;\\r\\n    width: 30%;\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jcmVhdGUtY3VzdG9tZXIvY3JlYXRlLWN1c3RvbWVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxpQkFBaUI7SUFDakIsV0FBVztDQUNkIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9jcmVhdGUtY3VzdG9tZXIvY3JlYXRlLWN1c3RvbWVyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJmb3Jte1xyXG4gICAgbWFyZ2luLWxlZnQ6IDIwJTtcclxuICAgIHdpZHRoOiAzMCU7XHJcbn0iXX0= */\"","module.exports = \"<!--form for add customer-->\\n<form novalidate [formGroup]=\\\"myForm\\\">\\n  <legend>Hello Guest,<br> please fill the fields</legend>\\n\\n  <!--input field for name-->\\n  <div class=\\\"form-group\\\">\\n    <label>Name</label>\\n    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"customerAdd.name\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.name.errors && (myForm.controls.name.touched || myForm.controls.name.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.name.errors && (myForm.controls.name.touched || myForm.controls.name.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.name.errors.required\\\">Name is required</small>\\n    </div>\\n  </div>\\n\\n  <!--input field for password-->\\n  <div class=\\\"form-group\\\">\\n    <label>Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"customerAdd.password\\\" \\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.password.errors && (myForm.controls.password.touched || myForm.controls.password.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.password.errors.required\\\">Password is required</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.minlength\\\">Password must be at least 5 characters</small>\\n      <small *ngIf=\\\"myForm.controls.password.errors.maxlength\\\">Password must be maximum 8 characters</small>\\n    </div>\\n  </div>\\n\\n  <!--input field for confirm password-->\\n  <div class=\\\"form-group\\\">\\n    <label>Retype Password</label>\\n    <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"confirmPassword\\\" placeholder=\\\"Confirm Password\\\"\\n      [ngClass]=\\\"{ 'is-invalid': myForm.controls.confirmPassword.errors && (myForm.controls.confirmPassword.touched || myForm.controls.confirmPassword.dirty) }\\\">\\n    <div *ngIf=\\\"myForm.controls.confirmPassword.errors && (myForm.controls.confirmPassword.touched || myForm.controls.confirmPassword.dirty)\\\" class=\\\"invalid-feedback\\\">\\n      <small *ngIf=\\\"myForm.controls.confirmPassword.errors.required\\\">Confirm Password is required</small>\\n      <small *ngIf=\\\"myForm.controls.confirmPassword.errors.passwordNotMatch\\\">Password not match</small>\\n    </div>\\n  </div>\\n\\n  <!--button become enable only when the form valid-->\\n  <button (click)=\\\"addCustomer()\\\" [disabled]=\\\"!myForm.valid\\\" class=\\\"btn btn-success\\\">Sign Up <i class=\\\"fas fa-user-plus\\\"></i></button>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { Customer } from '../../Common/Customer';\nimport { SharedDataService } from '../../services/shared-data.service';\nimport swal from 'sweetalert2';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { CustomValidators } from './../../common/custom-validators';\n\n@Component({\n  selector: 'app-create-customer',\n  templateUrl: './create-customer.component.html',\n  styleUrls: ['./create-customer.component.css']\n})\nexport class CreateCustomerComponent implements OnInit {\n\n  customerAdd : Customer = new Customer(0, \"\", \"\");\n  myForm: FormGroup;\n\n  //in the constructor we provide SharedCustomerDataService for service and FormBuilder for form validation\n  constructor(private _sharedDataService:SharedDataService, private _formBuilder:FormBuilder) {  }\n\n  //initialize form validation\n  ngOnInit() {\n    this.formValidation();\n  }\n\n  //form validation conditions\n  formValidation(){\n    this.myForm = this._formBuilder.group({\n      name: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(8)]],\n      confirmPassword: ['', Validators.compose([Validators.required])]\n    },\n    {\n      validator: CustomValidators.passwordMatchValidator\n    });\n  }\n\n  //add customer to DB\n  addCustomer(){\n    this._sharedDataService.addCustomer(this.customerAdd).\n    subscribe(\n      (resp) =>\n      {\n        swal({\n          type: 'success',\n          title: 'Customer created',\n          showConfirmButton: false,\n          timer: 1500\n        })\n        this.customerAdd = new Customer(0, \"\", \"\");\n      },\n      (err)=>\n      {\n        swal({\n          type: 'error',\n          title: 'Oops...',\n          text: err._body\n        })\n      }\n    )\n  }\n\n}\n","module.exports = \".buttons{\\r\\n    margin-left: 36%;\\r\\n    width: 29%;\\r\\n}\\r\\n#button{\\r\\n    margin: 10px\\r\\n}\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9ob21lL2hvbWUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGlCQUFpQjtJQUNqQixXQUFXO0NBQ2Q7QUFDRDtJQUNJLFlBQVk7Q0FDZiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuYnV0dG9uc3tcclxuICAgIG1hcmdpbi1sZWZ0OiAzNiU7XHJcbiAgICB3aWR0aDogMjklO1xyXG59XHJcbiNidXR0b257XHJcbiAgICBtYXJnaW46IDEwcHhcclxufSJdfQ== */\"","module.exports = \"<br><br>\\n<br><br>\\n<div class=\\\"buttons\\\">\\n  <button class=\\\"btn btn-success\\\" id=\\\"button\\\" (click)=\\\"routeToCustomer()\\\">Register as Customer</button>\\n  <button class=\\\"btn btn-success\\\" id=\\\"button\\\" (click)=\\\"routeToCompany()\\\">Register as Company</button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(private _router:Router) { }\n\n  ngOnInit() {\n  }\n\n  routeToCustomer(){\n    this._router.navigate(['customer']);\n  }\n\n  routeToCompany(){\n    this._router.navigate(['company']);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Company } from './../common/Company';\nimport { Customer } from './../common/Customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedDataService {\n\n  signUpURL = \"https://coupon-system-course-project.herokuapp.com/signup\";\n  loginPageURL = \"https://coupon-system-course-project.herokuapp.com/login.html\"\n\n  constructor(private _http:Http) { }\n\n  addCompany(company : Company){\n    return this._http.post(this.signUpURL+\"/company\", company);\n  }\n\n  addCustomer(customer : Customer){\n    return this._http.post(this.signUpURL+\"/customer\", customer);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}